<?php

/**
 * Implements hook_menu().
 */
function mymodel_menu() {

  $items['node/add/order'] = array(
    'title' => 'Add an order.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mymodel_order'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mymodel.pages.inc',
  );

  $items['orders'] = array(
    'title' => 'List of orders',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mymodel_orders_list'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mymodel.pages.inc',
  );

  $items['node/add/product'] = array(
    'title' => 'Add a Product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mymodel_product'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mymodel.pages.inc',
  );

  $items['products'] = array(
    'title' => 'List of products',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mymodel_products_list'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mymodel.pages.inc',
  );

  $items['order/%/delete'] = array(
    'title' => 'Delete an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mymodel_order_delete',1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/mymodel.pages.inc',
  );

  $items['order/%/edit'] = array(
    'title' => 'Edit an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mymodel_order',1),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mymodel.pages.inc',
  );

  $items['product/%/edit'] = array(
    'title' => 'Edit an Product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mymodel_product',1),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mymodel.pages.inc',
  );

  $items['product/%/delete'] = array(
    'title' => 'Delete an Product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mymodel_product_delete',1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/mymodel.pages.inc',
  );
  $items['product/autocomplete'] = array(
  'page callback' => '_mymodel_product_autocomplete',
  'access arguments' => array('access content'),
  'type' => MENU_CALLBACK,
 );

  $items['product/detail/%'] = array(
  'page callback' => '_mymodel_product_detail_js',
  'access arguments' => array('access content'),
  'page arguments' => array(2),
  'type' => MENU_CALLBACK,
 );

  return $items;
}

function _mymodel_product_autocomplete($string) {

  $query = db_select('product','p');
  $query->fields('p', array('pid','name','price'));
  $query->condition('p.name', '%' . $string . '%', 'like');

  $result = $query->execute();
  //print "\nQuery\n";
  //_dpq($query); // Display the query.

  foreach($result as $item) {
    $matches[$item->pid . ":" . check_plain($item->name)] = check_plain($item->name);
  }
  drupal_json_output($matches);
  exit;
}

function _mymodel_product_detail($pid) {
  $query = db_select('product','p');
  $query->fields('p', array('pid','name','price'));
  $query->condition('p.pid', $pid);

  $result = $query->execute();
  //print "\nQuery\n";
  //_dpq($query); // Display the query.

  return $result->fetch();
}

function _mymodel_product_detail_js($pid) {
  drupal_json_output(_mymodel_product_detail($pid));
  exit;
}

function _dpq($query, $return = FALSE, $name = NULL) {
  if (user_access('access devel information')) {
    if (method_exists($query, 'preExecute')) {
      $query->preExecute();
    }
    $sql = (string) $query;
    $quoted = array();
    $connection = Database::getConnection();
    foreach ((array) $query->arguments() as $key => $val) {
      $quoted[$key] = $connection->quote($val);
    }
    $sql = strtr($sql, $quoted);
    if ($return) {
      return $sql;
    }
    dvr($sql, $return, $name);
  }
  return ($return ? NULL : $query);
}
